// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fi.fullerine.kingofthestreets.domain.commutereval;

import fi.fullerine.kingofthestreets.domain.commutereval.Evaluation;
import fi.fullerine.kingofthestreets.domain.commutereval.EvaluationDataOnDemand;
import fi.fullerine.kingofthestreets.domain.commutereval.GenderEnum;
import fi.fullerine.kingofthestreets.domain.commutereval.HelmetUsageEnum;
import fi.fullerine.kingofthestreets.domain.commutereval.MovingSpeedEnum;
import fi.fullerine.kingofthestreets.domain.commutereval.ParallelLinesEnum;
import fi.fullerine.kingofthestreets.domain.commutereval.SideOfStreetEnum;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect EvaluationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EvaluationDataOnDemand: @Component;
    
    private Random EvaluationDataOnDemand.rnd = new SecureRandom();
    
    private List<Evaluation> EvaluationDataOnDemand.data;
    
    public Evaluation EvaluationDataOnDemand.getNewTransientEvaluation(int index) {
        Evaluation obj = new Evaluation();
        setGender(obj, index);
        setHelmetUsage(obj, index);
        setMovingSpeed(obj, index);
        setParallelLines(obj, index);
        setSideOfStreet(obj, index);
        setUserName(obj, index);
        return obj;
    }
    
    public void EvaluationDataOnDemand.setGender(Evaluation obj, int index) {
        GenderEnum gender = GenderEnum.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    public void EvaluationDataOnDemand.setHelmetUsage(Evaluation obj, int index) {
        HelmetUsageEnum helmetUsage = HelmetUsageEnum.class.getEnumConstants()[0];
        obj.setHelmetUsage(helmetUsage);
    }
    
    public void EvaluationDataOnDemand.setMovingSpeed(Evaluation obj, int index) {
        MovingSpeedEnum movingSpeed = MovingSpeedEnum.class.getEnumConstants()[0];
        obj.setMovingSpeed(movingSpeed);
    }
    
    public void EvaluationDataOnDemand.setParallelLines(Evaluation obj, int index) {
        ParallelLinesEnum parallelLines = ParallelLinesEnum.class.getEnumConstants()[0];
        obj.setParallelLines(parallelLines);
    }
    
    public void EvaluationDataOnDemand.setSideOfStreet(Evaluation obj, int index) {
        SideOfStreetEnum sideOfStreet = SideOfStreetEnum.class.getEnumConstants()[0];
        obj.setSideOfStreet(sideOfStreet);
    }
    
    public void EvaluationDataOnDemand.setUserName(Evaluation obj, int index) {
        String userName = "userName_" + index;
        if (userName.length() > 30) {
            userName = userName.substring(0, 30);
        }
        obj.setUserName(userName);
    }
    
    public Evaluation EvaluationDataOnDemand.getSpecificEvaluation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Evaluation obj = data.get(index);
        Long id = obj.getId();
        return Evaluation.findEvaluation(id);
    }
    
    public Evaluation EvaluationDataOnDemand.getRandomEvaluation() {
        init();
        Evaluation obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Evaluation.findEvaluation(id);
    }
    
    public boolean EvaluationDataOnDemand.modifyEvaluation(Evaluation obj) {
        return false;
    }
    
    public void EvaluationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Evaluation.findEvaluationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Evaluation' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Evaluation>();
        for (int i = 0; i < 10; i++) {
            Evaluation obj = getNewTransientEvaluation(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
